// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  recipes       Recipe[]
  ratings       Rating[]
  comments      Comment[]
  progress      Progress[]
  favorites     Favorite[]
  accounts      Account[]
  sessions      Session[]
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Recipe model
model Recipe {
  id            String        @id @default(cuid())
  title         String
  description   String?       @db.Text
  ingredients     Json            // Array of ingredient objects: [{name: string, amount: string}]
  instructions    String          @db.Text
  prepTime        String?
  cookTime        String?
  servings        Int?
  defenseSystems  DefenseSystem[] // Array of defense systems the recipe supports
  nutrients       Json?           // Key nutrients: {vitamin_c: "20mg", lycopene: "5mg"}
  imageUrl      String?
  userId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  ratings       Rating[]
  comments      Comment[]
  favorites     Favorite[]
  
  @@index([userId])
  @@index([createdAt])
}

// Defense systems enum
enum DefenseSystem {
  ANGIOGENESIS
  REGENERATION
  MICROBIOME
  DNA_PROTECTION
  IMMUNITY
}

// Rating model
model Rating {
  id        String   @id @default(cuid())
  value     Int      // 1-5 stars
  recipeId  String
  userId    String
  createdAt DateTime @default(now())
  
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([recipeId, userId])
  @@index([recipeId])
}

// Comment model
model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  recipeId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([recipeId])
  @@index([userId])
}

// Favorite model
model Favorite {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  createdAt DateTime @default(now())
  
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([recipeId, userId])
  @@index([userId])
}

// Progress tracking model
model Progress {
  id            String        @id @default(cuid())
  userId        String
  date          DateTime      @db.Date
  defenseSystem DefenseSystem
  foodsConsumed Json          // Array of food names: ["tomato", "olive oil", "salmon"]
  count         Int           // Number of foods eaten (max 5)
  notes         String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date, defenseSystem])
  @@index([userId, date])
}